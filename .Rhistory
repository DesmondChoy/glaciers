group_by(playlist_subgenre) %>%
summarise(criteria = sum(criteria)/n()) %>%
arrange(desc(criteria))
spotify %>%
mutate(criteria = instrumentalness + acousticness + valence) %>%
select(playlist_genre, playlist_subgenre, track_artist, track_album_name, criteria) %>%
distinct(track_album_name, .keep_all = TRUE) %>%
filter(playlist_subgenre == "hip hop") %>%
arrange(desc(criteria)) %>%
head(20)
spotify %>%
mutate(criteria = instrumentalness + acousticness + valence) %>%
select(playlist_genre, playlist_subgenre, track_artist, track_album_name, criteria) %>%
distinct(track_album_name, .keep_all = TRUE) %>%
arrange(desc(criteria)) %>%
head(20)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE)
rf_refit
log_refit <- fit_resamples(
log_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE)
library(tidyverse)
theme_set(theme_minimal())
food_consumption <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-18/food_consumption.csv")
food_consumption
library(skimr)
skim(food_consumption)
food_consumption %>%
count(food_category)
food_consumption %>%
group_by(food_category) %>%
summarize(avg.co2 = sum(co2_emmission)/n()) %>%
ggplot(aes(fct_reorder(food_category, avg.co2), avg.co2, fill = food_category)) +
geom_col(show.legend = F) +
coord_flip() +
labs(
x = "Food Categories",
y = "Average CO2 Emissions"
)
library(ggrepel) #ggplot identification of data points
food_consumption %>%
group_by(food_category) %>%
ggplot(aes(
fct_reorder(food_category, co2_emmission),
co2_emmission,
fill = food_category
)) +
geom_boxplot(show.legend = F) +
geom_text_repel(
data = . %>%
filter(food_category == "Beef") %>%
mutate(percentile = co2_emmission >= quantile(co2_emmission, 0.95, na.rm = T)) %>%
filter(percentile == 1),
aes(label = country)
) +
coord_flip() +
labs(
x = "Food Categories",
y = "Average CO2 Emissions"
)
food_consumption %>%
filter(food_category == "Beef") %>%
arrange(desc(consumption)) %>%
top_n(20) %>%
ggplot(aes(fct_reorder(country, consumption), consumption, fill = country)) +
geom_col(show.legend = F) +
coord_flip() +
labs(
x = "Country",
y = "Beef Consumption"
)
library(countrycode)
library(janitor)
food <- food_consumption %>%
select(-consumption) %>%
pivot_wider(names_from = food_category,
values_from = co2_emmission) %>%
clean_names() %>%
mutate(continent = countrycode(country,
origin = "country.name",
destination = "continent")) %>%
mutate(americas = case_when(continent == "Americas" ~ "Americas",
TRUE ~ "Other")) %>%
select(-country,-continent) %>%
mutate_if(is.character, as_factor)
food %>%
select(americas, everything())
library(GGally)
food %>%
ggscatmat(columns = 1:11, color = "americas", alpha = 0.7)
library(tidymodels)
set.seed(2020)
food_split <- initial_split(food, strata = americas)
food_split
food_train <- training(food_split)
food_test <- testing(food_split)
food_rec <- recipe(americas ~ ., data = food_train) %>%
step_corr(all_numeric()) %>%
prep()
food_rec
log_spec <- logistic_reg(mode = "classification") %>%
set_engine("glm")
rf_spec <- rand_forest(mode = "classification") %>%
set_engine("ranger")
log_fit <- log_spec %>%
fit(americas ~ .,
data = juice(food_rec))
log_fit
rf_fit <- rf_spec %>%
fit(americas ~ .,
data = juice(food_rec))
rf_fit
results_train <- log_fit %>%
predict(new_data = food_train) %>%
mutate(truth = food_train$americas) %>%
conf_mat(truth, .pred_class) %>%
summary() %>%
mutate(model = "log") %>%
bind_rows(
rf_fit %>%
predict(new_data = food_train) %>%
mutate(truth = food_train$americas) %>%
conf_mat(truth, .pred_class) %>%
summary() %>%
mutate(model = "rf")
)
results_test <- log_fit %>%
predict(new_data = food_test) %>%
mutate(truth = food_test$americas) %>%
conf_mat(truth, .pred_class) %>%
summary() %>%
mutate(model = "log") %>%
bind_rows(
rf_fit %>%
predict(new_data = food_test) %>%
mutate(truth = food_test$americas) %>%
conf_mat(truth, .pred_class) %>%
summary() %>%
mutate(model = "rf")
)
library(patchwork) #to combine ggplots
p1 <- results_train %>%
filter(.metric %in% c("accuracy", "precision", "recall", "f_meas")) %>%
ggplot(aes(.metric, .estimate, fill = model)) +
geom_col(position = "dodge2") +
geom_text(aes(label = round(.estimate, 2)),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(
x = "Performance Metrics (Training Data)",
y = "Score"
)
p2 <- results_test %>%
filter(.metric %in% c("accuracy", "precision", "recall", "f_meas")) %>%
ggplot(aes(.metric, .estimate, fill = model)) +
geom_col(position = "dodge2") +
geom_text(aes(label = round(.estimate, 2)),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(
x = "Performance Metrics (Test Data)",
y = "Score"
)
p1 + p2 + plot_layout(guides = "collect") & theme(legend.position = 'top')
food_cv_folds <- food_train %>%
vfold_cv()
food_cv_folds
log_refit <- fit_resamples(
log_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
rf_refit <- fit_resamples(
rf_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
results_train_refit <- log_refit %>%
collect_metrics() %>%
mutate(model = "log") %>%
bind_rows(rf_refit %>%
collect_metrics() %>%
mutate(model = "rf"))
p3 <- results_train_refit %>%
ggplot(aes(.metric, mean, fill = model)) +
geom_col(position = "dodge2") +
geom_text(aes(label = round(mean, 2)),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(
x = "Performance Metrics (Training Data, Resampled)",
y = "Score"
)
(p1 | p3) / p2 +
plot_annotation(title = "Training vs Training (Resampled) vs Test Data",
subtitle = "After resampling, overfitting is less apparent\nwith training performance metrics more closely resembling test data") +
plot_layout(guides = "collect") & theme(legend.position = 'top')
log_refit <- fit_resamples(
log_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
rf_refit <- fit_resamples(
rf_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
results_train_refit <- log_refit %>%
collect_metrics() %>%
mutate(model = "log") %>%
bind_rows(rf_refit %>%
collect_metrics() %>%
mutate(model = "rf"))
p3 <- results_train_refit %>%
ggplot(aes(.metric, mean, fill = model)) +
geom_col(position = "dodge2") +
geom_text(aes(label = round(mean, 2)),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(
x = "Performance Metrics (Training Data, Resampled)",
y = "Score"
)
(p1 | p3) / p2 +
plot_annotation(title = "Training vs Training (Resampled) vs Test Data",
subtitle = "After resampling, overfitting is less apparent\nwith training performance metrics more closely resembling test data") +
plot_layout(guides = "collect") & theme(legend.position = 'top')
log_refit <- fit_resamples(
log_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
rf_refit <- fit_resamples(
rf_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
results_train_refit <- log_refit %>%
collect_metrics() %>%
mutate(model = "log") %>%
bind_rows(rf_refit %>%
collect_metrics() %>%
mutate(model = "rf"))
p3 <- results_train_refit %>%
ggplot(aes(.metric, mean, fill = model)) +
geom_col(position = "dodge2") +
geom_text(aes(label = round(mean, 2)),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(
x = "Performance Metrics (Training Data, Resampled)",
y = "Score"
)
(p1 | p3) / p2 +
plot_annotation(title = "Training vs Training (Resampled) vs Test Data",
subtitle = "After resampling, overfitting is less apparent\nwith training performance metrics more closely resembling test data") +
plot_layout(guides = "collect") & theme(legend.position = 'top')
# Chunk 1: Setup
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE)
# Chunk 2: Libraries
library(tidyverse)
theme_set(theme_minimal())
# Chunk 3
food_consumption <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-18/food_consumption.csv")
food_consumption
# Chunk 4
library(skimr)
skim(food_consumption)
food_consumption %>%
count(food_category)
# Chunk 5
food_consumption %>%
group_by(food_category) %>%
summarize(avg.co2 = sum(co2_emmission)/n()) %>%
ggplot(aes(fct_reorder(food_category, avg.co2), avg.co2, fill = food_category)) +
geom_col(show.legend = F) +
coord_flip() +
labs(
x = "Food Categories",
y = "Average CO2 Emissions"
)
# Chunk 6
library(ggrepel) #ggplot identification of data points
food_consumption %>%
group_by(food_category) %>%
ggplot(aes(
fct_reorder(food_category, co2_emmission),
co2_emmission,
fill = food_category
)) +
geom_boxplot(show.legend = F) +
geom_text_repel(
data = . %>%
filter(food_category == "Beef") %>%
mutate(percentile = co2_emmission >= quantile(co2_emmission, 0.95, na.rm = T)) %>%
filter(percentile == 1),
aes(label = country)
) +
coord_flip() +
labs(
x = "Food Categories",
y = "Average CO2 Emissions"
)
# Chunk 7
food_consumption %>%
filter(food_category == "Beef") %>%
arrange(desc(consumption)) %>%
top_n(20) %>%
ggplot(aes(fct_reorder(country, consumption), consumption, fill = country)) +
geom_col(show.legend = F) +
coord_flip() +
labs(
x = "Country",
y = "Beef Consumption"
)
# Chunk 8
library(countrycode)
library(janitor)
food <- food_consumption %>%
select(-consumption) %>%
pivot_wider(names_from = food_category,
values_from = co2_emmission) %>%
clean_names() %>%
mutate(continent = countrycode(country,
origin = "country.name",
destination = "continent")) %>%
mutate(americas = case_when(continent == "Americas" ~ "Americas",
TRUE ~ "Other")) %>%
select(-country,-continent) %>%
mutate_if(is.character, as_factor)
food %>%
select(americas, everything())
# Chunk 9
library(GGally)
food %>%
ggscatmat(columns = 1:11, color = "americas", alpha = 0.7)
# Chunk 10
library(tidymodels)
set.seed(2020)
food_split <- initial_split(food, strata = americas)
food_split
food_train <- training(food_split)
food_test <- testing(food_split)
# Chunk 11
food_rec <- recipe(americas ~ ., data = food_train) %>%
step_corr(all_numeric()) %>%
prep()
food_rec
# Chunk 12
log_spec <- logistic_reg(mode = "classification") %>%
set_engine("glm")
rf_spec <- rand_forest(mode = "classification") %>%
set_engine("ranger")
# Chunk 13
log_fit <- log_spec %>%
fit(americas ~ .,
data = juice(food_rec))
log_fit
# Chunk 14
rf_fit <- rf_spec %>%
fit(americas ~ .,
data = juice(food_rec))
rf_fit
# Chunk 15
results_train <- log_fit %>%
predict(new_data = food_train) %>%
mutate(truth = food_train$americas) %>%
conf_mat(truth, .pred_class) %>%
summary() %>%
mutate(model = "log") %>%
bind_rows(
rf_fit %>%
predict(new_data = food_train) %>%
mutate(truth = food_train$americas) %>%
conf_mat(truth, .pred_class) %>%
summary() %>%
mutate(model = "rf")
)
results_test <- log_fit %>%
predict(new_data = food_test) %>%
mutate(truth = food_test$americas) %>%
conf_mat(truth, .pred_class) %>%
summary() %>%
mutate(model = "log") %>%
bind_rows(
rf_fit %>%
predict(new_data = food_test) %>%
mutate(truth = food_test$americas) %>%
conf_mat(truth, .pred_class) %>%
summary() %>%
mutate(model = "rf")
)
# Chunk 16
library(patchwork) #to combine ggplots
p1 <- results_train %>%
filter(.metric %in% c("accuracy", "precision", "recall", "f_meas")) %>%
ggplot(aes(.metric, .estimate, fill = model)) +
geom_col(position = "dodge2") +
geom_text(aes(label = round(.estimate, 2)),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(
x = "Performance Metrics (Training Data)",
y = "Score"
)
p2 <- results_test %>%
filter(.metric %in% c("accuracy", "precision", "recall", "f_meas")) %>%
ggplot(aes(.metric, .estimate, fill = model)) +
geom_col(position = "dodge2") +
geom_text(aes(label = round(.estimate, 2)),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(
x = "Performance Metrics (Test Data)",
y = "Score"
)
p1 + p2 + plot_layout(guides = "collect") & theme(legend.position = 'top')
# Chunk 17
food_cv_folds <- food_train %>%
vfold_cv()
food_cv_folds
log_refit <- fit_resamples(
log_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
rf_refit <- fit_resamples(
rf_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
rf_refit
results_train_refit
results_train_refit <- log_refit %>%
collect_metrics() %>%
mutate(model = "log") %>%
bind_rows(rf_refit %>%
collect_metrics() %>%
mutate(model = "rf"))
results_train_refit
?collect_metrics
log_refit <- fit_resamples(
log_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
rf_refit <- fit_resamples(
rf_spec,
americas ~ .,
resamples = food_cv_folds,
control = control_resamples(save_pred = T),
metrics = metric_set(accuracy, f_meas, precision, recall)
)
results_train_refit <- log_refit %>%
collect_metrics() %>%
mutate(model = "log") %>%
bind_rows(rf_refit %>%
collect_metrics() %>%
mutate(model = "rf"))
p3 <- results_train_refit %>%
ggplot(aes(.metric, mean, fill = model)) +
geom_col(position = "dodge2") +
geom_text(aes(label = round(mean, 2)),
position = position_dodge(width = 0.9), vjust = -0.5) +
labs(
x = "Performance Metrics (Training Data, Resampled)",
y = "Score"
)
(p1 | p3) / p2 +
plot_annotation(title = "Training vs Training (Resampled) vs Test Data",
subtitle = "After resampling, overfitting is less apparent\nwith training performance metrics more closely resembling test data") +
plot_layout(guides = "collect") & theme(legend.position = 'top')
(p1 | p3) / p2 +
plot_annotation(title = "Training vs Training (Resampled) vs Test Data",
subtitle = "After resampling, overfitting is less apparent\nwith training performance metrics more closely resembling test data") +
plot_layout(guides = "collect") & theme(legend.position = 'top')
(p1 | p3) / p2 +
plot_annotation(title = "Training vs Training (Resampled) vs Test Data",
subtitle = "After resampling, overfitting is less apparent\nwith training performance metrics more closely resembling test data") +
plot_layout(guides = "collect") & theme(legend.position = 'side')
(p1 | p3) / p2 +
plot_annotation(title = "Training vs Training (Resampled) vs Test Data",
subtitle = "After resampling, overfitting is less apparent\nwith training performance metrics more closely resembling test data") +
plot_layout(guides = "collect") & theme(legend.position = 'bottom')
blogdown:::serve_site()
